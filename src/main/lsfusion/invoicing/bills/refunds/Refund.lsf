MODULE Refund;

REQUIRE BillDone, InvoiceCanceled;

NAMESPACE Invoicing;

// types
isRefund 'Возврат' = DATA BOOLEAN (InvoiceType);
EXTEND FORM invoiceType PROPERTIES(o) isRefund;

isRefund (Invoice i) = isRefund(type(i));

invoiceType = DATA InvoiceType (BillType);
nameInvoiceType 'Тип возврата' (BillType t) = name(invoiceType(t));
EXTEND FORM billType PROPERTIES(o) nameInvoiceType;

// lines
@defineDocLineRelation(bill, invoice, 'Приобретения', 'Возвраты', b, i);

numberBillLine 'Реализация' (InvoiceLine l) = number(billLine(l)); 

CONSTRAINT billLine(InvoiceLine l) AND NOT 
                (vendor(billLine(l)) = customer(l) AND 
                 item(billLine(l)) = item(l))
    CHECKED BY billLine
    MESSAGE 'Контрагент и номенклатура реализации должны совпадать с контрагентом и товаром возврата';

// events
WHEN LOCAL SETCHANGED(billLine(InvoiceLine l)) DO {
    price(l) <- price(billLine(l));
    in(l, Tax t) <- in(billLine(l), t);
}

EXTEND FORM invoice
    PROPERTIES(l) numberBillLine SHOWIF isRefund(i)
;

// add
fill ABSTRACT (InvoiceLine, BillLine);
fill ABSTRACT (Invoice, Bill);
addRefund 'Вернуть' (Bill b) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW i = Invoice {
            type(i) <- invoiceType(type(b));
            
            dateTime(i) <- currentDateTime();
            
            customer(i) <- vendor(b);
            customerAccount(i) <- vendorAccount(b);
            
            company(i) <- company(b);
            companyAccount(i) <- companyAccount(b);
            
            note(i) <- note(b);
            
            FOR bill(BillLine l) = b INLINE NEW bl = InvoiceLine DO {
                billLine(bl) <- l; 
                invoice(bl) <- i;

                item(bl) <- item(l);

                quantity(bl) <- quantity(l);
                
                fill(bl, l);
            }
            
            fill(i, b);
            
            SHOW invoice OBJECTS i = i DOCKED;
        }
        
    }
}

EXTEND FORM bill
    PROPERTIES(b) addRefund SHOWIF ready(b)
;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(addRefund(b));
    }               
}

// returned quantity
returned 'Возвращено' (BillLine bl) = 
    GROUP SUM quantity(InvoiceLine il) IF billLine(il) = bl AND active(invoice(il));

FORM billInvoiceShow 'Возвраты'
    OBJECTS bl = BillLine
    
    OBJECTS il = InvoiceLine
    PROPERTIES(il) READONLY nameStatus, number, dateTime, quantity
    FILTERS billLine(il) = bl,
            active(invoice(il))
;
    
EXTEND FORM bill
    PROPERTIES(l) returned ON CHANGE { SHOW billInvoiceShow OBJECTS bl = l; } SHOWIF countInvoiceLine(b)
;