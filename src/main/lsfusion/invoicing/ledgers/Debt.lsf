MODULE Debt;

REQUIRE Partner, Company;

NAMESPACE Invoicing;

CLASS ABSTRACT Debt 'Задолженность';
active 'Активен' = ABSTRACT BOOLEAN (Debt) MATERIALIZED;
number 'Номер' = ABSTRACT STRING[31] (Debt) MATERIALIZED;

dateTime 'Дата' = ABSTRACT DATETIME (Debt) MATERIALIZED;
dueDateTime 'Оплатить до' = ABSTRACT DATETIME(Debt) MATERIALIZED;

partner = ABSTRACT Partner (Debt) MATERIALIZED;
namePartner 'Контрагент' (Debt d) = name(partner(d));

INDEX partner(Debt d), dateTime(d), d;

company = ABSTRACT Company (Debt) MATERIALIZED;
nameCompany 'Компания' (Debt d) = name(company(d));

amount 'Сумма' = ABSTRACT NUMERIC[14,2] (Debt) MATERIALIZED;

class 'Вид' (Debt d) = objectClassName(d) IF d IS Debt CHARWIDTH 15;

type 'Тип' = ABSTRACT ISTRING[100] (Debt) MATERIALIZED;

// incoming
CLASS ABSTRACT IncomingDebt 'Входящая задолженность' : Debt;

// outgoing
CLASS ABSTRACT OutgoingDebt 'Исходящая задолженность' : Debt;

signedAmount 'Сумма' (Debt d) = IF d IS OutgoingDebt THEN amount(d) ELSE -amount(d) MATERIALIZED;

// match
paid 'Оплачено' = DATA NUMERIC[14,2] (IncomingDebt, OutgoingDebt);

WHEN CHANGED(amount(IncomingDebt id)) AND amount(id) < paid(id, OutgoingDebt od) DO
    paid(id, od) <- amount(id);

WHEN CHANGED(amount(OutgoingDebt od)) AND amount(od) < paid(IncomingDebt id, od) DO
    paid(id, od) <- amount(od);

canBeMatched (IncomingDebt id, OutgoingDebt od) =
    partner(id) = partner(od) AND company(id) = company(od);

paid 'Оплачено' (IncomingDebt id) = GROUP SUM paid(id, OutgoingDebt od) IF active(od) MATERIALIZED;
paid 'Оплачено' (OutgoingDebt od) = GROUP SUM paid(IncomingDebt id, od) IF active(id) MATERIALIZED;  
paid 'Оплачено' (Debt d) = MULTI paid[IncomingDebt](d), paid[OutgoingDebt](d);

left 'Осталось' (IncomingDebt id) = amount(id) (-) paid(id);
left 'Осталось' (OutgoingDebt od) = amount(od) (-) paid(od);
left 'Осталось' (Debt d) = MULTI left[IncomingDebt](d), left[OutgoingDebt](d);
signedLeft 'Осталось' (Debt d) = IF d IS OutgoingDebt THEN left(d) ELSE -left(d);

left 'Осталось' (IncomingDebt id, OutgoingDebt od) = min(left(id), left(od));

canBePaid (IncomingDebt id, OutgoingDebt od) = canBeMatched(id, od) AND left(id, od) > 0 AND active(id) AND active(od);

CONSTRAINT left(IncomingDebt id) < 0 MESSAGE 'По входящей задолженности разнесено больше, чем сумма задолженности';
CONSTRAINT left(OutgoingDebt id) < 0 MESSAGE 'По исходящей задолженности разнесено больше, чем сумма задолженности';
