MODULE ManufacturingOrder;

REQUIRE Doc, MetaNumerator, Input, DateUtils, 
        BomNested, LocationEmployee,
        ManufacturingOrderType, ManufacturingSettings;

NAMESPACE Manufacturing;

CLASS ManufacturingOrder 'Производственный заказ';

@defineDocStatus(manufacturingOrder, 'производственного заказа');

type 'Тип' = DATA ManufacturingOrderType (ManufacturingOrder) NONULL;
nameType 'Тип' (ManufacturingOrder o) = name(type(o));

WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(type(o)) DO type(o) <- defaultManufacturingOrderType(); 

scheduledDateTime 'Дата начала' = DATA DATETIME (ManufacturingOrder);
scheduledDateTime(ManufacturingOrder o) <- currentDateTime() WHEN SET(o IS ManufacturingOrder);
@defineDateTimeAggregation(ManufacturingOrder, scheduled, ' начала');

@defineNumberType(ManufacturingOrder);

numberDate 'Описание' (ManufacturingOrder o) = number(o) + ' от ' + scheduledDateTime(o) IN id;

item '{Item}' = DATA Item (ManufacturingOrder) NONULL;
nameItem '{Item}' (ManufacturingOrder m) = name(item(m));

uom (ManufacturingOrder o) = uom(item(o));
nameUom 'Ед. изм.' (ManufacturingOrder m) = name(uom(m));

// bom
bom 'Спецификация' = DATA Bom (ManufacturingOrder) NONULL;
descriptionBom 'Спецификация' (ManufacturingOrder m) = description(bom(m));
CONSTRAINT bom(ManufacturingOrder m) AND NOT item(m) = item(bom(m))
    CHECKED BY bom[ManufacturingOrder]
    MESSAGE 'Номенклатура спецификации производственного заказа должна равняться номенклатуре производственного заказа';

WHEN LOCAL CHANGED(item(ManufacturingOrder o)) AND NOT CHANGED(bom(o)) AND defaultBom(item(o)) DO
    bom(o) <- defaultBom(item(o));

company = DATA Company (ManufacturingOrder);
nameCompany 'Компания' (ManufacturingOrder m) = name(company(m));
WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany(); 

materialsLocation 'Списать из' = DATA Location (ManufacturingOrder);
nameMaterialsLocation 'Списать из' (ManufacturingOrder m) = name(materialsLocation(m));
WHEN LOCAL SETCHANGED(type(ManufacturingOrder mo)) AND NOT materialsLocation(mo) DO materialsLocation(mo) <- materialsLocation(type(mo));

unbuild 'Разборка' (ManufacturingOrder mo)= unbuild(type(mo)); 

// consumed
CLASS ConsumedLine 'Материалы';

manufacturingOrder = DATA ManufacturingOrder (ConsumedLine) NONULL DELETE;

countConsumedLine 'Строк материалов' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER ConsumedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (ConsumedLine);
nameItem '{Item}' (ConsumedLine l) = name(item(l));
idBarCodeItem 'Штрихкод' (ConsumedLine l) = idBarCode(item(l));
idItem 'Код' (ConsumedLine l) = id(item(l));

uom (ConsumedLine l) = uom(item(l));
nameUom 'Ед. изм.' (ConsumedLine l) = name(uom(l));

toConsume 'Израсходовать' = DATA NUMERIC[16,3] (ConsumedLine);

toConsume 'Израсходовать' (ManufacturingOrder o) = GROUP SUM toConsume(ConsumedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// finished
CLASS FinishedLine 'Продукция';

manufacturingOrder = DATA ManufacturingOrder (FinishedLine) NONULL DELETE;

countFinishedLine 'Строк продукции' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER FinishedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (FinishedLine);
nameItem '{Item}' (FinishedLine l) = name(item(l));
idBarCodeItem 'Штрихкод' (FinishedLine l) = idBarCode(item(l));
idItem 'Код' (FinishedLine l) = id(item(l));

uom 'Ед. изм.' = DATA Uom (FinishedLine);
nameUom 'Ед. изм.' (FinishedLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(FinishedLine l)) DO uom(l) <- uom(item(l));

toProduce 'Произвести' = DATA NUMERIC[16,3] (FinishedLine);

costRatio 'Доля стоимости' (FinishedLine) = DATA NUMERIC[16,3] (FinishedLine);

costRatio (ManufacturingOrder o) = GROUP SUM costRatio(FinishedLine l) IF manufacturingOrder(l) = o MATERIALIZED;
normalizedCostRatio (FinishedLine l) = IF costRatio(manufacturingOrder(l)) THEN 
                                                                costRatio(l) / costRatio(manufacturingOrder(l)) ELSE 
                                                                (1.0 IF item(l) = item(manufacturingOrder(l))); 

toProduce 'Произвести' (ManufacturingOrder o) = GROUP SUM toProduce(FinishedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// manufacture
toManufacture 'Произвести' (ManufacturingOrder o) = IF unbuild(o) THEN toConsume(o) ELSE toProduce(o) MATERIALIZED;

// line properties
nameType 'Тип' (ConsumedLine l) = nameType(manufacturingOrder(l));
scheduledDateTime 'Дата начала' (ConsumedLine l) = scheduledDateTime(manufacturingOrder(l));
number 'Номер' (ConsumedLine l) = number(manufacturingOrder(l));
descriptionBom 'Спецификация' (ConsumedLine l) = descriptionBom(manufacturingOrder(l));

edit (ConsumedLine l) + { edit(manufacturingOrder(l)); } 

FORM manufacturingOrder 'Производственный заказ'
    OBJECTS o = ManufacturingOrder PANEL 
    PROPERTIES(o) READONLY unbuild
    PROPERTIES(o) nameType, scheduledDateTime, number, nameCompany, 
                  nameItem, toManufacture, nameUom, 
                  descriptionBom, nameMaterialsLocation 
    
    OBJECTS c = ConsumedLine
    PROPERTIES(c) index READONLY, nameItem, nameUom, idBarCodeItem, idItem, toConsume, NEW, DELETE
    FILTERS manufacturingOrder(c) = o

    OBJECTS l = FinishedLine
    PROPERTIES(l) index READONLY, nameItem, nameUom, idBarCodeItem, idItem, toProduce, costRatio, 
                  NEW, DELETE
    FILTERS manufacturingOrder(l) = o
    
    EDIT ManufacturingOrder OBJECT o
;

DESIGN manufacturingOrder {
    caption = (CONCAT ' ', 'Производственный заказ', '№' + number(o), 'от ' + scheduledDateTime(o));
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; };
                MOVE PROPERTY(scheduledDateTime(o));
                MOVE PROPERTY(number(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameCompany(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameItem(o)) { notNull = TRUE; }
                MOVE PROPERTY(unbuild(o));
                NEW quantity {
                    type = CONTAINERH;
                    MOVE PROPERTY(toManufacture(o));
                    MOVE PROPERTY(nameUom(o));
                }
                MOVE PROPERTY(descriptionBom(o)) { notNull = TRUE; };
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            NEW consumed {
                caption = 'Материалы';
                MOVE PROPERTY(nameMaterialsLocation(o));
                NEW consumedPane {
                    type = SPLITH;
                    fill = 1; 
                    MOVE BOX(c);
                    NEW consumedLinesTab {
                        fill = 0.3;
                        type = TABBED;
                    }
                }
            }
            NEW finished {
                caption = 'Продукция';
                NEW finishedHeader { 
                    type = CONTAINERH;
                    alignment = STRETCH; 
                }
                NEW finishedPane {
                    type = SPLITH;
                    fill = 1; 
                    MOVE BOX(l);
                    NEW finishedLinesTab {
                        fill = 0.3;
                        type = TABBED;
                    }
                }
            }
        }   
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

background = ABSTRACT CASE COLOR (ManufacturingOrder);

FORM manufacturingOrders 'Производственные заказы'
    OBJECTS o = ManufacturingOrder BACKGROUND background(o)
    PROPERTIES(o) READONLYIF isReadonly()
                           nameType, scheduledDateTime, number, nameCompany, 
                           nameItem, unbuild READONLY, 
                           toManufacture READONLY, nameUom READONLY, 
                           descriptionBom, 
                           nameMaterialsLocation,
                           countConsumedLine READONLY, countFinishedLine READONLY
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ManufacturingOrder OBJECT o
;

@extendFormEditable(manufacturingOrders);

@defineDocObjectsForm(manufacturingOrders, o, 'Заказы');
@defineDocStatusForm(manufacturingOrder, o);
@defineDocLocationAccess(manufacturingOrder, o, materials);

NAVIGATOR {
    operations {
        NEW manufacturingOrders;
    }
}

// copy
extraCopy ABSTRACT (ManufacturingOrder, ManufacturingOrder);

clone(ManufacturingOrder to, ManufacturingOrder from) {
    type(to) <- type(from);

    item(to) <- item(from);
    bom(to) <- bom(from);
    company(to) <- company(from);
    materialsLocation(to) <- materialsLocation(from);
    
    FOR manufacturingOrder(ConsumedLine ml) = from NEW ol = ConsumedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        toConsume(ol) <- toConsume(ml);
    }

    FOR manufacturingOrder(FinishedLine ml) = from NEW ol = FinishedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        uom(ol) <- uom(ml);
        toProduce(ol) <- toProduce(ml);
        costRatio(ol) <- costRatio(ml);
    }
    
    extraCopy(to, from);
}

copy 'Копировать' (ManufacturingOrder from) {
    NEWSESSION {
        NEW to = ManufacturingOrder {
            clone(to, from);
            SHOW manufacturingOrder OBJECTS o = to DOCKED;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) copy
;

DESIGN manufacturingOrder {
    secondaryActions {
        MOVE PROPERTY(copy(o)); 
    }
}

// fill
fillByQuantity (ManufacturingOrder o, NUMERIC[16,3] q) {
    DELETE ConsumedLine l WHERE manufacturingOrder(l) = o; 
    DELETE FinishedLine l WHERE manufacturingOrder(l) = o;

    IF unbuild(o) THEN {
        FOR bom(ComponentLine cl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            uom(l) <- uom(cl);
            toProduce(l) <- NUMERIC[16,3](quantity(cl) * q / quantity(bom(o)));
            costRatio(l) <- costRatio(cl);
        }
                
        NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            toConsume(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            toConsume(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    } ELSE {
        FOR intermediateBom(bom(o), ComponentLine cl, TEXT path) AND NOT intermediate(nestedBom(cl)) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            toConsume(l) <- NUMERIC[16,3](quantity(bom(o), cl, path) * q / quantity(bom(o)));
        }
                
        NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            uom(l) <- uom(o);
            toProduce(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            uom(l) <- uom(bl);
            toProduce(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    }
}

fillLines 'Заполнить по спецификации' (ManufacturingOrder o) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        DIALOG dialogQuantity OBJECTS q = toManufacture(o) INPUT DO {
            fillByQuantity(o, q);
            APPLY;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) fillLines SHOWIF status(o) = ManufacturingOrderStatus.draft
;

DESIGN manufacturingOrder {
    primaryActions {
        MOVE PROPERTY(fillLines(o)) { fontStyle = 'bold'; }
    }
}
