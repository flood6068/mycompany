MODULE SUZLotOrderDone;

REQUIRE SUZLotOrderStatus, Lot;

NAMESPACE SUZ;

EXTEND CLASS LotOrderStatus {
    done 'Получен'
}
done 'Получен' = DATA BOOLEAN (LotOrder);

status(LotOrder s) += WHEN done(s) THEN LotOrderStatus.done;


lastBlockId = DATA LOCAL STRING();
 
idLot = DATA LOCAL STRING[100] (INTEGER);
lotCount = GROUP SUM 1 IF idLot(INTEGER i);

FORM getLots
    PROPERTIES lastBlockId = lastBlockId()
    
    OBJECTS codes = INTEGER
    PROPERTIES(codes) value = idLot
;

lotOrder = DATA LotOrder (Lot) INDEXED;
countLot (LotOrder o) = GROUP SUM 1 IF lotOrder(Lot d) IF lotOrder(d) = o; 

lotQuantity (LotOrder o, Product p) = GROUP SUM 1 IF lotOrder(Lot l) = o AND product(l) = p;
lotQuantity (LotOrder o, STRING[14] gtin) = GROUP SUM 1 IF lotOrder(Lot l) = o AND gtin(product(l)) = gtin;

left (LotOrder o, Product p) = quantity(o, p) - OVERRIDE lotQuantity(o, p), 0;
left (LotOrder o, STRING[14] gtin) = quantity(o, gtin) - OVERRIDE lotQuantity(o, gtin), 0;

getLots 'Получить марки' (LotOrder o) {
    NEWSESSION {
       
        FOR quantity(o, STRING[14] gtin) DO {
        
            lastBlockId() <- '0';
           
            WHILE left(o, gtin) > 0 DO {
            
                suzToken() <- token(company(o));
                LOCAL result = FILE();
                TRY {
                    EXTERNAL HTTP GET lotOrderUrl(o) + '/codes?omsId=' + omsId(company(o)) + '&orderId=' + id(o) + '&gtin=' + gtin +
                                     '&quantity=' + INTEGER(left(o, gtin)) + '&lastBlockId=' + lastBlockId() 
                                     HEADERS suzHeaders TO result;
                } CATCH {
                    fileToString(result());
                    MESSAGE 'Ошибка при получении марок из СУЗ : \n' + (OVERRIDE messageCaughtException(), '') + '\n' + (OVERRIDE resultString(), '');
                    RETURN;
                }
                
                IMPORT getLots JSON FROM result();
                
                IF NOT lotCount() THEN BREAK;
                
                LOCAL left = INTEGER (Product);
                left (Product p) <- left(o, p) WHERE gtin(p) = gtin;
                 
                LOCAL lots = INTEGER (Product);
                lots (Product p) <- PARTITION UNGROUP lotCount
                                              LIMIT left(p)
                                              ORDER p;
                
                LOCAL index = INTEGER (Product);
                index (Product p) <- PARTITION SUM lots(p) ORDER p;
                
                FOR idLot(INTEGER i) NEW l = Lot DO {
                    id(l) <- barcodeToId(idLot(i));
                    tail(l) <- barcodeToTail(idLot(i));
                    lotOrder(l) <- o;
                    product(l) <- GROUP LAST Product p ORDER DESC index(p) WHERE index(p) > i;
                } 
            }
        }
        
        APPLY;
        IF canceled() THEN RETURN;
    }
    
    MESSAGE 'Марки успешно получены';
    
    NEWSESSION {
        IF quantityLotOrderLine(o) = countLot(o) THEN done(o) <- TRUE;
        APPLY;
    }
}

EXTEND FORM lotOrder
    PROPERTIES(o) getLots SHOWIF status(o) = LotOrderStatus.available, done
    
    OBJECTS ol = Lot
    PROPERTIES(ol) READONLY idProduct, nameProduct, id
    FILTERS lotOrder(ol) = o
;

DESIGN lotOrder {
    primaryActions {
        MOVE PROPERTY(getLots(o)) { fontStyle = 'bold'; }
    }                
    status {
        MOVE PROPERTY(done(o));                               
    }
    
    details {
        MOVE BOX(ol) {
            caption = (CONCAT ' ', 'Марки', '(' + countLot(o) + ')'); 
        }
    }
}

EXTEND FORM lotOrders    
    EXTEND FILTERGROUP status
        FILTER 'Получен' status(o) = LotOrderStatus.done    
;
