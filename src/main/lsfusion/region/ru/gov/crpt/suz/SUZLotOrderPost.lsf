MODULE SUZLotOrderPost;

REQUIRE SUZAuthentication, SUZLotOrder, CryptoPro;

NAMESPACE SUZ;

EXTEND CLASS LotOrderStatus {
    posted 'Отправлен'
}
posted 'Отправлен' = DATA BOOLEAN (LotOrder);

status (LotOrder s) += WHEN posted(s) THEN LotOrderStatus.posted;
colorStatus (LotOrder s) += WHEN status(s) = LotOrderStatus.posted THEN RGB(252,247,149);

// release method type
CLASS ReleaseMethodType 'Способ выпуска товаров в оборот' {
    PRODUCTION 'Производство в РФ',
    IMPORT_ 'Ввезен в РФ (Импорт)',
    REMAINS 'Маркировка остатков',
    CROSSBORDER 'Трансграничная торговля',
    REMARK 'Перемаркировка'
}
id 'Код' (ReleaseMethodType o) = STRING[100](rtrim(getWord(staticName(o),'.',2),'_')) IF o IS ReleaseMethodType CHARWIDTH 10;
name 'Наименование' (ReleaseMethodType o) = staticCaption(o) IF o IS ReleaseMethodType CHARWIDTH 15;
    
FORM dialogReleaseMethodTypes 'Способ выпуска товаров в оборот'
    OBJECTS o = ReleaseMethodType
    PROPERTIES(o) READONLY name
        
    LIST ReleaseMethodType OBJECT o
;

releaseMethodType 'Способ выпуска товаров в оборот' = DATA ReleaseMethodType (LotOrder) NONULL;
nameReleaseMethodType 'Способ выпуска товаров в оборот' (LotOrder o) = name(releaseMethodType(o));

lotOrderUrl (LotOrder o) = url() + '/api/v2/' + idType(o);

quantity (LotOrder o, STRING[14] gtin) = GROUP SUM quantity(LotOrderLine d) IF lotOrder(d) = o AND gtin = gtinProduct(d); 

FORM postLotOrder
    OBJECTS o = LotOrder PANEL
    
    PROPERTIES contactPerson = (OVERRIDE name(currentUser()), 'Администратор'), releaseMethodType = id(releaseMethodType(o)), createMethodType = 'SELF_MADE'
    
    OBJECTS products = STRING[14]
    PROPERTIES gtin = VALUE(products), 
               quantity = quantity(o, products), 
               serialNumberType = 'OPERATOR' IF products IS STRING[14], 
               templateId = 10 IF products IS STRING[14], 
               cisType = 'UNIT' IF products IS STRING[14]
    FILTERS quantity(o, products)
;

post 'Отправить в СУЗ' (LotOrder o) {
    APPLY; 
    IF canceled() THEN RETURN;

    NEWSESSION {
        EXPORT postLotOrder OBJECTS o = o JSON;
        
        sign(exportFile(), TRUE, company(o));
        
        suzToken() <- token(company(o));
        LOCAL result = FILE();
        TRY {
            EXTERNAL HTTP POST lotOrderUrl(o) + '/orders?omsId=' + omsId(company(o)) HEADERS suzSignedHeaders PARAMS exportFile() TO result;
        } CATCH {
            fileToString(result());
            MESSAGE 'Ошибка при оправке документа в СУЗ : \n' + (OVERRIDE messageCaughtException(), '') + '\n' + (OVERRIDE resultString(), '');
            RETURN;
        }
        
        LOCAL orderId = STRING[100] ();
        IMPORT JSON FROM result() TO() orderId;
        id(o) <- orderId();
        posted(o) <- TRUE;
        APPLY;

        MESSAGE 'Документ успешно отослан. Присвоен код : ' + id(o);
    } 
}

EXTEND FORM lotOrder
    PROPERTIES(o) post SHOWIF status(o) = LotOrderStatus.draft, posted
    
    PROPERTIES(o) nameReleaseMethodType 
;

DESIGN lotOrder {
    primaryActions {
        MOVE PROPERTY(post(o)) { fontStyle = 'bold'; }
    }                
    status {
        MOVE PROPERTY(posted(o));                               
    }

    PROPERTY(nameReleaseMethodType(o)) { notNull = TRUE; }
}

EXTEND FORM lotOrders    
    EXTEND FILTERGROUP status
        FILTER 'Отправлен' status(o) = LotOrderStatus.posted    
;

// constraint
CONSTRAINT (CHANGED(product(LotOrderLine l)) OR CHANGED(quantity(l))) AND (PREV(posted(lotOrder(l))) OR posted(lotOrder(l)))
    MESSAGE 'Запрещено редактировать заказы марок после их отсылки в СУЗ';

// copy
clone (LotOrder to, LotOrder from) + {
    releaseMethodType(to) <- releaseMethodType(from);
}