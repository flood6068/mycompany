MODULE ShipmentDone;

REQUIRE ShipmentReady;

NAMESPACE Inventory;

EXTEND CLASS ShipmentStatus {
    done 'Отгружен'
}
done 'Отгружен' = DATA BOOLEAN (Shipment);

status(Shipment s) += WHEN done(s) THEN ShipmentStatus.done;

executionDateTime 'Дата выполнения' = DATA DATETIME (Shipment);
WHEN SET(done(Shipment s)) AND NOT CHANGED(executionDateTime(s)) DO executionDateTime(s) <- currentDateTime(); 
@defineDateTimeAggregation(Shipment, execution, ' отгрузки');

executionDateTime 'Дата выполнения' (ShipmentLine l) = executionDateTime(shipment(l));
executionDate 'Дата выполнения' (ShipmentLine l) = executionDate(shipment(l));

done 'Отгружено' = DATA NUMERIC[16,3] (ShipmentLine);

weightDone 'Вес' (ShipmentLine l) = NUMERIC[16,3](done(l) * weight(product(l)));

CONSTRAINT done(ShipmentLine l) < 0 OR done(l) > initialDemand(l) 
    MESSAGE 'Отгруженое количество должно быть от 0 до исходного';

setDone 'Заполнить Отгружено' (Shipment s) {
    done(ShipmentLine l) <- reserved(l) WHERE shipment(l) = s;    
}

extraValidate ABSTRACT LIST (Shipment);
validate 'Отгрузить' (Shipment s) {   
    APPLY; // сохраняем изменения
    IF canceled() THEN RETURN; // если сработало ограничение, то выходим
    
    NEWSESSION {
        IF NOT immediate(s) THEN {
            extraValidate(s);
            
            IF NOT (GROUP SUM 1 IF done(ShipmentLine l) AND shipment(l) = s) THEN
                ASK 'Не заполнены отгруженные количества для отгрузки ' + number(s) + '. Проставить зарезервированными?' DO {
                    setDone(s);
                } ELSE RETURN;
        }
        
        done(s) <- TRUE;
        APPLY;
    }
}

EXTEND FORM shipmentLines
    PROPERTIES(l) READONLY executionDateTime AFTER scheduledDateTime(l), done
;

toValidate (Shipment s) = status(s) = ShipmentStatus.ready OR (immediate(s) AND status(s) = ShipmentStatus.draft);

EXTEND FORM shipment
    PROPERTIES(s) validate SHOWIF toValidate(s), 
                  done,
                  setDone DRAW l TOOLBAR SHOWIF status(s) = ShipmentStatus.ready,
                  executionDateTime SHOWIF done(s)
    
    PROPERTIES(l) done BACKGROUND RGB(198,230,247) IF toValidate(s)
;

DESIGN shipment {                               
    primaryActions {                  
        MOVE PROPERTY(validate(s)) FIRST { fontStyle = 'bold'; }
    }
    status {
        MOVE PROPERTY(done(s));                              
    } 
    headerLeft {
        MOVE PROPERTY(executionDateTime(s));
    }                  
}

EXTEND FORM shipments
    PROPERTIES(s) READONLYIF isReadonly() executionDateTime AFTER scheduledDateTime(s)
 
    EXTEND FILTERGROUP status
        FILTER 'Отгружен' status(s) = ShipmentStatus.done
;

@defineSelectionAction(shipments, Shipment, validate, 'Отгружен', statuses);