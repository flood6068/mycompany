MODULE CostLedger;

REQUIRE Location, Product, Utils, CostProduct;

NAMESPACE Inventory;

CLASS CostLedger 'Регистр себестоимости';
class 'Вид' (CostLedger l) = objectClassName(l) IF l IS CostLedger CHARWIDTH 15;

type 'Тип' = ABSTRACT ISTRING[100] (CostLedger) MATERIALIZED;

dateTime 'Время' = ABSTRACT DATETIME (CostLedger) MATERIALIZED;
number 'Номер' = ABSTRACT STRING[31] (CostLedger) MATERIALIZED;

location 'Место хранения' = ABSTRACT Location (CostLedger) MATERIALIZED;
nameLocation 'Место хранения' (CostLedger l) = name(location(l));

product 'Товар' = ABSTRACT Product (CostLedger) MATERIALIZED;
nameProduct 'Товар' (CostLedger l) = name(product(l));

CLASS InCostLedger 'Входящая проводка' : CostLedger;

quantity 'Количество' = ABSTRACT NUMERIC[16,3] (InCostLedger);

dataAmount 'Сумма (первичная)' = DATA NUMERIC[16,3] (InCostLedger);
calcAmount 'Сумма (расчетная)' = ABSTRACT NUMERIC[16,3] (InCostLedger);
amount 'Сумма' (InCostLedger l) = OVERRIDE dataAmount(l), calcAmount(l); 

price 'Цена' (InCostLedger il) = amount(il) / quantity(il);

CLASS OutCostLedger 'Исходящая проводка' : CostLedger;

quantity 'Количество' = ABSTRACT NUMERIC[16,3] (OutCostLedger);
negQuantity (OutCostLedger l) = -quantity(l); 

amount 'Сумма' = DATA NUMERIC[16,3] (OutCostLedger);
price 'Цена' (OutCostLedger il) = amount(il) / quantity(il);

// Проводки с учетом знака
signedQuantity 'Количество' (CostLedger l) = MULTI quantity[InCostLedger](l), -quantity[OutCostLedger](l) MATERIALIZED;
signedAmount 'Сумма' (CostLedger l) = MULTI amount[InCostLedger](l), -amount[OutCostLedger](l) MATERIALIZED;

costQuantity 'Количество' (Location l, Product p) = 
    GROUP SUM signedQuantity(CostLedger cl) IF location(cl) = l AND product(cl) = p MATERIALIZED;
costAmount 'Себестоимость' (Location l, Product p) = 
    GROUP SUM signedAmount(CostLedger cl) IF location(cl) = l AND product(cl) = p MATERIALIZED;
costPrice 'Себестоимость за единицу' (Location l, Product p) = costAmount(l, p) / costQuantity(l, p);

costQuantity 'Количество' (Location l, Product p, DATETIME dt) = 
    costQuantity(l, p) (-) (GROUP SUM signedQuantity(CostLedger cl) IF location(cl) = l AND product(cl) = p AND dateTime(cl) >= dt);
costAmount 'Себестоимость' (Location l, Product p, DATETIME dt) = 
    costAmount(l, p) (-) (GROUP SUM signedAmount(CostLedger cl) IF location(cl) = l AND product(cl) = p AND dateTime(cl) >= dt);
costPrice 'Себестоимость за единицу' (Location l, Product p, DATETIME dt) = costAmount(l, p, dt) / costQuantity(l, p, dt); 

costQuantity 'Количество' (Product p) = GROUP SUM costQuantity(Location l, p);
costAmount 'Себестоимость' (Product p) = GROUP SUM costAmount(Location l, p);
costPrice 'Себестоимость за единицу' (Product p) = costAmount(p) / costQuantity(p);

overCost 'Себестоимость' (Item i) = OVERRIDE costPrice(i), cost(i);
// Связываем OutCostLedger и InCostLedger

quantity 'Расходовано' = DATA NUMERIC[16,3] (OutCostLedger, InCostLedger);
costed 'Расходовано' (InCostLedger il) = GROUP SUM quantity(OutCostLedger ol, il) MATERIALIZED;
notCosted 'Не расходовано' (InCostLedger il) = quantity(il) (-) costed(il) MATERIALIZED; 

costed 'Расходовано' (OutCostLedger ol) = GROUP SUM quantity(ol, InCostLedger il) MATERIALIZED;

calcCost = DATA LOCAL NESTED BOOLEAN (CostLedger);

calculateCost () {
    // расчет по стандартной цене
    amount (OutCostLedger ol) <- NUMERIC[14,2](quantity(ol) * cost(product(ol))) 
        WHERE calcCost(ol) AND costingMethod(product(ol)) = CostingMethod.standardPrice;

    dataAmount (InCostLedger il) <- NUMERIC[14,2](quantity(il) * cost(product(il))) IF costingMethod(product(il)) = CostingMethod.standardPrice
        WHERE calcCost(il);

    // расчет по fifo и среднему
    quantity(OutCostLedger out, InCostLedger in) <- NULL WHERE calcCost(out); // сбрасываем старый расчет

    LOCAL ordered = INTEGER (OutCostLedger); // сортируем по товару и дробим на несколько итераций по товарам (остальные расчеты независимы) 
    ordered(OutCostLedger ledger) <- PARTITION SUM 1 IF calcCost(ledger) 
                                               ORDER dateTime(ledger), ledger 
                                               BY product(ledger);

    FOR iterate(INTEGER i, 1, (GROUP MAX ordered(OutCostLedger ledger))) DO {
        LOCAL iteration = BOOLEAN (OutCostLedger);
        iteration(OutCostLedger l) <- ordered(l) = i; // чтобы определились классы
        
        quantity(OutCostLedger ol, InCostLedger il) <- (PARTITION UNGROUP quantity
                                                                  LIMIT notCosted(il) IF location(ol) = location(il) 
                                                                                     AND product(ol) = product(il) 
                                                                                     AND dateTime(il) <= dateTime(ol) 
                                                                  ORDER dateTime(il), il
                                                                  BY ol)
                                                       WHERE iteration(ol) AND quantity(ol) >= 0;
                                                       
        quantity(OutCostLedger ol, InCostLedger il) <- -(PARTITION UNGROUP negQuantity
                                                                   LIMIT costed(il) IF location(ol) = location(il) 
                                                                                     AND product(ol) = product(il) 
                                                                                     AND dateTime(il) <= dateTime(ol) 
                                                                   ORDER DESC dateTime(il), il
                                                                   BY ol)
                                                       WHERE iteration(ol) AND quantity(ol) < 0;

        amount (OutCostLedger ol) <- NUMERIC[14,2](quantity(ol) * costPrice(location(ol), product(ol), dateTime(ol)))
            WHERE iteration(ol) AND costingMethod(product(ol)) = CostingMethod.avco;
    }
    
    amount (OutCostLedger ol) <- NUMERIC[14,2](GROUP SUM quantity(ol, InCostLedger il) * price(il)) 
        WHERE calcCost(ol) AND costingMethod(product(ol)) = CostingMethod.fifo;
}

ON {
    calcCost (CostLedger l) <- CHANGED(location(l)) OR CHANGED(product(l)) OR CHANGED(signedQuantity(l));
    IF GROUP SUM 1 IF calcCost(CostLedger l) THEN 
        NEWSESSION SINGLE {
            calculateCost();
        }
}

FORM dialogCost 'Параметры расчета себестоимости'
    OBJECTS d = DATE PANEL
    PROPERTIES 'Дата, с которой пересчитывать' = VALUE(d)
;
recalculateCost 'Пересчитать себестоимость' () {
    DIALOG dialogCost OBJECTS d INPUT DO {
        calcCost(CostLedger l) <- TRUE WHERE DATE(dateTime(l)) >= d;
        calculateCost();
        APPLY;
    }
} 
